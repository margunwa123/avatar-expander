{"version":3,"sources":["components/Guide.js","components/NavBar.js","components/InputForm.js","components/GraphImage.js","components/FriendsTable.js","components/TargetDataCard.js","App.js","serviceWorker.js","index.js"],"names":["AlertDialog","React","useState","open","setOpen","handleClose","IconButton","color","aria-label","component","onClick","icon","faQuestionCircle","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","autoFocus","NavBar","AppBar","position","Toolbar","Grid","container","alignItems","justify","direction","Typography","variant","InputForm","classes","this","props","className","root","noValidate","autoComplete","TextField","error","label","type","InputLabelProps","shrink","onChange","helperText","errorMessage","Component","withStyles","width","margin","display","justifyContent","GraphImage","myConfig","highlightDegree","node","size","highlightStrokeColor","directed","height","window","innerHeight","innerWidth","graphData","nodes","length","data","config","onClickNode","onDoubleClickNode","FriendsTable","element","faCircle","TableContainer","Paper","elevation","friendsList","title","Table","TableHead","head","TableRow","TableCell","headText","TableBody","map","friends","name","renderElement","padding","background","TargetDataCard","Card","targetData","CardContent","App","handleOnChange","event","setState","target","value","startEmpty","fetchTarget","updateFriendsList","newTargetData","state","json","newFriendsList","forEach","friend","push","sort","a","b","filter","index","self","findIndex","t","updateGraphData","newGraphData","nodeColor","links","sourceId","source","fetch","method","then","response","status","Error","statusText","payload","catch","_error","message","handleOnClickNode","nodeId","handleOnDoubleClickNode","xs","md","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.f0c8114b.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default function AlertDialog() {\r\n\tconst [open, setOpen] = React.useState(false);\r\n\r\n\tconst handleClickOpen = () => {\r\n\t\tsetOpen(true);\r\n\t};\r\n\r\n\tconst handleClose = () => {\r\n\t\tsetOpen(false);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t<IconButton color=\"white\" aria-label=\"help\" component=\"span\" onClick={handleClickOpen}>\r\n\t\t\t<FontAwesomeIcon icon={faQuestionCircle} color='white' />\r\n\t\t\t</IconButton>\r\n\t\t<Dialog\r\n\t\t\topen={open}\r\n\t\t\tonClose={handleClose}\r\n\t\t\taria-labelledby=\"alert-dialog-title\"\r\n\t\t\taria-describedby=\"alert-dialog-description\"\r\n\t\t>\r\n\t\t\t<DialogTitle id=\"alert-dialog-title\">{\"How to Use\"}</DialogTitle>\r\n\t\t\t<DialogContent>\r\n\t\t\t<DialogContentText id=\"alert-dialog-description\">\r\n\t\t\t\t<p>Enter id to search.</p>\r\n\t\t\t\t<p>Click on a node or on a friend in the friend list to search that node.</p>\r\n\t\t\t\t<p>Double click on a node to expand from that node.</p>\r\n\t\t\t\t<p>Scroll down/up to zoom in/out.</p>\r\n\t\t\t\t<p>Drag and drop on an empty space to move the graph.</p>\r\n\t\t\t</DialogContentText>\r\n\t\t\t</DialogContent>\r\n\t\t\t<DialogActions>\r\n\t\t\t<Button onClick={handleClose} color=\"primary\" autoFocus>\r\n\t\t\t\tOK\r\n\t\t\t</Button>\r\n\t\t\t</DialogActions>\r\n\t\t</Dialog>\r\n\t\t</div>\r\n\t);\r\n}","import React from 'react'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Guide from './Guide';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nconst NavBar = () => {\r\n    return(\r\n        <AppBar position=\"sticky\">\r\n            <Toolbar>\r\n                <Grid container alignItems=\"flex-start\" justify=\"flex-start\" direction=\"row\" >\r\n                    <Typography variant=\"title\" color=\"inherit\">\r\n                        Avatar Expander\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid container alignItems=\"flex-start\" justify=\"flex-end\" direction=\"row\" >\r\n                    <Guide />\r\n                </Grid>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\nexport default NavBar;","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst styles = {\r\n\troot: {\r\n\t\twidth: '100%',\r\n\t\tmargin: '1% auto',\r\n\t\tdisplay: 'flex',\r\n\t\tjustifyContent: 'center',\r\n\t}\r\n};\r\n\r\nclass InputForm extends React.Component {\r\n\trender() {\r\n\t\tconst { classes } = this.props;\r\n\t\treturn (\r\n\t\t\t<form className={classes.root} noValidate autoComplete=\"off\">\r\n\t\t\t\t<TextField\r\n\t\t\t\t\terror={ this.props.error }\r\n\t\t\t\t\tid=\"filled-number\"\r\n\t\t\t\t\tlabel=\"Enter id to search\"\r\n\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\tInputLabelProps={{\r\n\t\t\t\t\t\tshrink: true,\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tvariant=\"filled\"\r\n\t\t\t\t\tonChange={ this.props.onChange }\r\n\t\t\t\t\thelperText={ this.props.errorMessage }\r\n\t\t\t\t/>\r\n\t\t\t</form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withStyles(styles)(InputForm);","import React from 'react';\r\nimport { Graph } from \"react-d3-graph\";\r\n\r\nclass GraphImage extends React.Component {\r\n    render() {\r\n        const myConfig = {\r\n            highlightDegree: 0,\r\n            node: {\r\n                color: \"lightgreen\",\r\n                size: 120,\r\n                highlightStrokeColor: \"blue\",\r\n            },\r\n            directed: true,\r\n            height: window.innerHeight,\r\n            width: window.innerWidth/2,\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                {this.props.graphData.nodes.length > 0 &&\r\n                    <Graph\r\n                        id=\"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\r\n                        data={this.props.graphData}\r\n                        config={myConfig}\r\n                        onClickNode={this.props.onClickNode}\r\n                        onDoubleClickNode={this.props.onDoubleClickNode}\r\n                    />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GraphImage;","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { Typography } from '@material-ui/core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst styles = {\r\n\troot: {\r\n\t\tmargin: '3% 5%',\r\n\t\twidth: '90%',\r\n\t},\r\n\ttitle: {\r\n\t\tpadding: '1.5%',\r\n\t},\r\n\thead: {\r\n\t\tbackground: 'black',\r\n\t},\r\n\theadText: {\r\n\t\tcolor: 'white',\r\n\t}\r\n};\r\n\r\nclass FriendsTable extends React.Component {\r\n\trenderElement(element) {\r\n\t\tswitch (element) {\r\n\t\t\tcase 'fire':\r\n\t\t\t\treturn <FontAwesomeIcon icon={faCircle} color='red' />;\r\n\t\t\tcase 'water':\r\n\t\t\t\treturn <FontAwesomeIcon icon={faCircle} color='blue' />;\r\n\t\t\tcase 'air':\r\n\t\t\t\treturn <FontAwesomeIcon icon={faCircle} color='#79edfe' />;\r\n\t\t\tcase 'earth':\r\n\t\t\t\treturn <FontAwesomeIcon icon={faCircle} color='brown' />;\r\n\t\t\tdefault:\r\n\t\t\t\treturn <FontAwesomeIcon icon={faCircle} color='black' />;\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { classes } = this.props;\r\n\t\treturn (\r\n\t\t<TableContainer className={classes.root} component={Paper} elevation={5}>\r\n\t\t\t{this.props.friendsList.length > 0 &&\r\n\t\t\t<Typography className={classes.title} variant=\"h6\">Friends</Typography>\r\n\t\t\t}\r\n\t\t\t{this.props.friendsList.length > 0 &&\r\n\t\t\t<Table aria-label=\"friends table\">\r\n\t\t\t\t<TableHead className={classes.head}>\r\n\t\t\t\t<TableRow>\r\n\t\t\t\t\t<TableCell className={classes.headText}>ID</TableCell>\r\n\t\t\t\t\t<TableCell className={classes.headText}>Name</TableCell>\r\n\t\t\t\t\t<TableCell className={classes.headText}>Element</TableCell>\r\n\t\t\t\t</TableRow>\r\n\t\t\t\t</TableHead>\r\n\t\t\t\t<TableBody>\r\n\t\t\t\t{this.props.friendsList.map((friends) => (\r\n\t\t\t\t\t<TableRow onClick={() => this.props.onClick(friends.id) }>\r\n\t\t\t\t\t<TableCell>{friends.id}</TableCell>\r\n\t\t\t\t\t<TableCell>{friends.name}</TableCell>\r\n\t\t\t\t\t<TableCell>\r\n\t\t\t\t\t\t{this.renderElement(friends.element)} {friends.element}\r\n\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t</TableRow>\r\n\t\t\t\t))}\r\n\t\t\t\t</TableBody>\r\n\t\t\t</Table>\r\n\t\t\t}\r\n\t\t</TableContainer>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withStyles(styles)(FriendsTable);","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst styles = {\r\n    root: {\r\n\t\twidth: '40%',\r\n\t\tmargin: '2% auto',\r\n    },\r\n    title: {\r\n      \tpadding: '1.5%',\r\n    },\r\n    data: {\r\n      \tpadding: '1.5%',\r\n    }\r\n};\r\n\r\nclass TargetDataCard extends React.Component {\r\n\trenderElement(element) {\r\n\t\tswitch (element) {\r\n\t\t\tcase 'fire':\r\n\t\t\t\treturn <FontAwesomeIcon icon={faCircle} color='red' />;\r\n\t\t\tcase 'water':\r\n\t\t\t\treturn <FontAwesomeIcon icon={faCircle} color='blue' />;\r\n\t\t\tcase 'air':\r\n\t\t\t\treturn <FontAwesomeIcon icon={faCircle} color='#79edfe' />;\r\n\t\t\tcase 'earth':\r\n\t\t\t\treturn <FontAwesomeIcon icon={faCircle} color='brown' />;\r\n\t\t\tdefault:\r\n\t\t\t\treturn <FontAwesomeIcon icon={faCircle} color='black' />;\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { classes } = this.props;\r\n\t\treturn (\r\n\t\t\t<Card className={classes.root} elevation={5}>\r\n\t\t\t\t{ this.props.targetData !== null &&\r\n\t\t\t\t<CardContent>\r\n\t\t\t\t\t<Typography className={classes.title} variant=\"h6\">\r\n\t\t\t\t\t\tSuspect\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<Typography className={classes.data}>\r\n\t\t\t\t\t\tID - { this.props.targetData.id}<br/>\r\n\t\t\t\t\t\tName - { this.props.targetData.name }<br/>\r\n\t\t\t\t\t\tElement - { this.renderElement(this.props.targetData.element) } { this.props.targetData.element }\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t</CardContent>\r\n\t\t\t\t}\r\n\t\t\t</Card>\r\n\t\t);\r\n\t}\r\n}\r\n  \r\n  export default withStyles(styles)(TargetDataCard);","import React, { Component } from 'react';\nimport './App.css';\nimport NavBar from './components/NavBar';\nimport InputForm from './components/InputForm';\nimport GraphImage from './components/GraphImage';\nimport FriendsTable from './components/FriendsTable';\nimport TargetDataCard from './components/TargetDataCard';\nimport Grid from '@material-ui/core/Grid';\n\nclass App extends Component {\n\tconstructor(props) {\n        super(props);\n        this.state = { target: '', json: null, targetData: null, friendsList: [], graphData: { nodes: [], links: [] }, startEmpty: false, error: false, errorMessage: '' };\n\t}\n\t\n    handleOnChange = event => {\n\t\tthis.setState({ target: event.target.value, startEmpty: true }, this.fetchTarget);\n\t};\n\n\tupdateFriendsList = () => {\n\t\tvar newTargetData;\n\t\tnewTargetData = { id: this.state.json.id, name: this.state.json.name, element: this.state.json.element };\n\t\tthis.setState({ targetData: newTargetData });\n\n\t\tvar newFriendsList = [];\n\t\tthis.state.json.friends.forEach(friend => {\n\t\t\tif (friend.id !== this.state.json.id) {\n\t\t\t\tnewFriendsList.push({ id: friend.id, name: friend.name, element: friend.element });\n\t\t\t}\n\t\t});\n\t\tnewFriendsList.sort((a, b) => (a.id - b.id));\n\t\tnewFriendsList = newFriendsList.filter((friends, index, self) =>\n\t\t\tindex === self.findIndex((t) => (\n\t\t\t\tt.id === friends.id\t// remove duplicate friends\n\t\t\t))\n\t\t);\n\t\tthis.setState({ friendsList: newFriendsList });\n\t}\n\n\tupdateGraphData = () => {\n\t\tvar newGraphData;\n\t\tif (this.state.startEmpty === true) {\n\t\t\tnewGraphData = { nodes: [], links: [] };\n\t\t} else {\n\t\t\tnewGraphData = this.state.graphData;\n\t\t}\n\t\tvar nodeColor;\n\t\tswitch (this.state.json.element) {\n\t\t\tcase 'fire':\n\t\t\t\tnodeColor = 'red';\n\t\t\t\tbreak;\n\t\t\tcase 'water':\n\t\t\t\tnodeColor = 'blue';\n\t\t\t\tbreak;\n\t\t\tcase 'air':\n\t\t\t\tnodeColor = '#79edfe';\n\t\t\t\tbreak;\n\t\t\tcase 'earth':\n\t\t\t\tnodeColor = 'brown';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tnodeColor = 'black';\n\t\t}\n\t\tconst sourceId = this.state.json.id;\n\t\tnewGraphData.nodes.push({ id: this.state.json.id, name: this.state.json.name, color: nodeColor });\n\t\tthis.state.json.friends.forEach(friend => {\n\t\t\tswitch (friend.element) {\n\t\t\t\tcase 'fire':\n\t\t\t\t\tnodeColor = 'red';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'water':\n\t\t\t\t\tnodeColor = 'blue';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'air':\n\t\t\t\t\tnodeColor = '#79edfe';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'earth':\n\t\t\t\t\tnodeColor = 'brown';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tnodeColor = 'black';\n\t\t\t}\n\t\t\tnewGraphData.nodes.push({ id: friend.id, name: friend.name, color: nodeColor });\n\t\t});\n\t\tnewGraphData.nodes = newGraphData.nodes.filter((nodes, index, self) =>\n\t\t\tindex === self.findIndex((t) => (\n\t\t\t\tt.id === nodes.id\t// remove duplicate nodes\n\t\t\t))\n\t\t);\n\t\tthis.state.json.friends.forEach(friend => {\n\t\t\tnewGraphData.links.push({ source: sourceId, target: friend.id });\n\t\t});\n\t\tnewGraphData.links = newGraphData.links.filter((links, index, self) =>\n\t\t\tindex === self.findIndex((t) => (\n\t\t\t\t(t.source === links.source && t.target === links.target)\t// remove duplicate edges\n\t\t\t\t|| (links.source === links.target)\t// remove self loop\n\t\t\t))\n\t\t);\n\t\tthis.setState({ graphData: newGraphData });\n\t}\n\t\n    fetchTarget = () => {\n        fetch(\"https://avatar.labpro.dev/friends/\" + this.state.target, {\n            method: 'GET'\n        })\n        .then(function(response) {\n            if (response.status === 200) return response.json();\n            throw new Error(response.statusText);\n        })\n\t\t.then(json => this.setState({ error: false, errorMessage: '', json: json.payload }))\n\t\t.then(this.updateFriendsList)\n\t\t.then(this.updateGraphData)\n        .catch(_error => this.setState({error: true, errorMessage: _error.message}));\n\t}\n\t\n\thandleOnClickNode = nodeId => {\n\t\tthis.setState({ target: nodeId, startEmpty: true }, this.fetchTarget);\n\t}\n\n\thandleOnDoubleClickNode = nodeId => {\n\t\tthis.setState({ target: nodeId, startEmpty: false }, this.fetchTarget);\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<NavBar />\n\t\t\t\t<Grid container>\n\t\t\t\t\t<Grid xs={12}>\n\t\t\t\t\t\t<InputForm target={ this.state.target } json={ this.state.json } onChange={ this.handleOnChange } error={ this.state.error } errorMessage={ this.state.errorMessage } />\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid md={6}>\n\t\t\t\t\t\t<GraphImage target={ this.state.target } graphData={ this.state.graphData } onClickNode={ this.handleOnClickNode } onDoubleClickNode={ this.handleOnDoubleClickNode } />\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid md={6}>\n\t\t\t\t\t\t<TargetDataCard targetData={ this.state.targetData } />\n\t\t\t\t\t\t<FriendsTable friendsList={ this.state.friendsList } onClick={ this.handleOnClickNode } />\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}